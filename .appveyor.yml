environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci\\run_with_env.cmd"

  matrix:

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON: C:\\Python36-x64
      PYTHON_VERSION: 3.6.x
      PYTHON_ARCH: 64
      MSVC: 12.0
      ARCH: x86_64
      BOOST_PREFIX: C:\Libraries\boost_1_66_0

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      PYTHON: C:\\Python36-x64
      PYTHON_VERSION: 3.6.x
      PYTHON_ARCH: 64
      MSVC: 15.9.19
      ARCH: x86_64
      BOOST_PREFIX: C:\Libraries\boost_1_69_0

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      PYTHON: C:\\Python36-x64
      PYTHON_VERSION: 3.6.x
      PYTHON_ARCH: 64
      MSVC: 16.7.4
      ARCH: x86_64
      BOOST_PREFIX: C:\Libraries\boost_1_73_0

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""
  - ECHO "Installed libraries:"
  - ps: "ls \"C:/Libraries/\""
  ## This path doesn't exist with the VS 2017 worker images
  #- ECHO "Installed SDKs:"
  #- ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & .ci\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture

  - curl -LfsS -o vswhere.exe https://github.com/Microsoft/vswhere/releases/download/2.8.4/vswhere.exe
  #- |
  #   curl -LfsS -o faber.tar.gz https://github.com/stefanseefeld/faber/archive/snapshot/2020-08-01.tar.gz
  #   tar xf faber.tar.gz
  #   CD faber-snapshot-2020-08-01
  #   python setup.py install
  #   CD ..
  - python -m pip install faber
  # report the available MSVC compilers
  - faber --log=tools --info=tools cxx
  - easy_install sphinx
  - python -m pip install numpy
  - set FARGS=--log=summary --log=output --log=actions --log=commands --with-boost-include=%BOOST_PREFIX% target.arch=%ARCH% cxx.name=msvc cxx.version=%MSVC%

build_script:
  - faber %FARGS% config || type config.log
  - faber %FARGS% -j8

test_script:
  - faber %FARGS% -j8 test.report

after_test:
  # If tests are successful, create binary packages for the project.
  #- "%CMD_IN_ENV% python setup.py bdist_wheel"
  #- "%CMD_IN_ENV% python setup.py bdist_wininst"
  #- "%CMD_IN_ENV% python setup.py bdist_msi"
  #- ps: "ls dist"

#artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  #- path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
